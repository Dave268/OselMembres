<?php

namespace OSEL\EventBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * SubscribeEventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscribeEventRepository extends \Doctrine\ORM\EntityRepository
{
    public function getSubscriptions($id, $page, $nbPerPage, $criteria, $desc, $presence)
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.event', 'c')
            ->addSelect('c');
        $qb->where($qb->expr()->in('c.id', $id));
        if($presence)
        {
            $qb->andWhere('a.presence = :presence')
                ->setParameter('presence', $presence);
        }


        if($criteria == "lastname")
        {
            $qb->leftJoin('a.user', 'u')
                ->addSelect('u');
            if($desc)
            {
                $qb->orderBy('u.'.$criteria, 'DESC');
            }
            else
            {
                $qb->orderBy('u.'.$criteria, 'ASC');
            }
        }
        else
        {
            if($desc)
            {
                $qb->orderBy('a.'.$criteria, 'DESC');
            }
            else
            {
                $qb->orderBy('a.'.$criteria, 'ASC');
            }
        }




        $qb->setFirstResult(($page-1) * $nbPerPage)
            ->setMaxResults($nbPerPage)
        ;

        return new Paginator($qb, true);

    }

    public function getNbSubscriptions($id, $presence = true)
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.event', 'c')
            ->addSelect('c');
        $qb->where($qb->expr()->in('c.id', $id));

        $qb->andWhere($qb->expr()->in('a.presence', $presence));


        return count($qb->getQuery()->getResult());

    }
	
	public function getNbParticipants($id)
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.event', 'c')
            ->addSelect('c');
        $qb->where($qb->expr()->in('c.id', $id));



        return count($qb->getQuery()->getResult());

    }

    public function getNbSubscriptionsEvent($id)
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.subEvents', 'c')
            ->addSelect('c');
        $qb->where($qb->expr()->in('c.id', $id));

        return count($qb->getQuery()->getResult());

    }

    public function getPrice($id)
    {
        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.event', 'c')
            ->addSelect('c');
        $qb->where($qb->expr()->in('c.id', $id));
        $qb->andWhere($qb->expr()->in('a.presence', true));

        $totalPrice = 0;
        $totalPaid = 0;
        foreach ($qb->getQuery()->getResult() as $inscription)
        {
            $totalPrice += $inscription->getPrix();
            if($inscription->getPaye())
                $totalPaid += $inscription->getPrix();
        }


        return array($totalPrice, $totalPaid);

    }


    public function findByUser($id, $idEvent)
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.user', 'c')
            ->addSelect('c')
            ->leftJoin('a.event', 'e')
            ->addSelect('e')
        ;

        $qb->where($qb->expr()->in('c.id', $id));
        $qb->andWhere($qb->expr()->in('e.id', $idEvent));

        return $qb
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }

    public function findByEvent($id)
    {
        $qb = $this
            ->createQueryBuilder('a')
            ->leftJoin('a.event', 'c')
            ->addSelect('c')
        ;

        $qb->where($qb->expr()->in('c.id', $id));

        return $qb
            ->getQuery()
            ->getResult()
            ;
    }

}

<?php

namespace OSEL\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
	public function getUsers($page, $nbPerPage, $enabled, $criteria, $desc)
    {
		$qb = $this->createQueryBuilder('a')
                    ->leftJoin('a.instruments', 'c')
                    ->addSelect('c');

		if($enabled){
			$qb->where('a.enabled = :enabled')
				->setParameter('enabled', true);
		}
		if($desc){
			$order = 'DESC';
		}
		else{
			$order = 'ASC';
		}
			
		if($criteria == 'instruments')
		{
			$qb->orderBy('c.instrument', $order);
		}
		else{
			$qb->orderBy('a.'.$criteria, $order);
		}
	
		

        $qb->setFirstResult(($page-1) * $nbPerPage)
            ->setMaxResults($nbPerPage)
        ;

        return new Paginator($qb, true);

	}

	public function getExportQuery()
    {
        $queryBuilder = $this->createQueryBuilder('a');
	    $query = $queryBuilder->getQuery();
	    //$results = $query->getResult();
	    return $query;
    }

    /**
     * Loads the user for the given username.
     *
     * This method must throw UsernameNotFoundException if the user is not
     * found.
     *
     * @param string $username The username
     *
     * @return UserInterface
     *
     * @throws UsernameNotFoundException if the user is not found
     */
    public function loadUserByUsername($username)
    {
        $query = $this->_em->createQuery('SELECT u FROM OSELUserBundle:User u WHERE u.username = :username OR u.email = :username');
        $query->setParameters(array('username' => $username));

        return $query->getOneOrNullResult();
    }

    /**
     * Refreshes the user.
     *
     * It is up to the implementation to decide if the user data should be
     * totally reloaded (e.g. from the database), or if the UserInterface
     * object can just be merged into some internal array of users / identity
     * map.
     *
     * @return UserInterface
     *
     * @throws UnsupportedUserException if the user is not supported
     */
    public function refreshUser(UserInterface $user)
    {
        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * Whether this provider supports the given user class.
     *
     * @param string $class
     *
     * @return bool
     */
    public function supportsClass($class)
    {
        return $class === 'OSEL\UserBundle\Entity\User';
    }
}

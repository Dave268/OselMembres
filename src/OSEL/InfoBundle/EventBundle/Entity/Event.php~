<?php

namespace OSEL\EventBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\UploadedFile;


/**
 * Event
 *
 * @ORM\Table(name="event")
 * @ORM\Entity(repositoryClass="OSEL\EventBundle\Repository\EventRepository")
 */
class Event
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=255)
     */
    private $title;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateStart", type="datetime")
     */
    private $dateStart;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateEnd", type="datetime")
     */
    private $dateEnd;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateAdd", type="datetime")
     */
    private $dateAdd;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateUpdate", type="datetime", nullable=true)
     */
    private $dateUpdate;

    /**
     * @var string
     *
     * @ORM\Column(name="infos", type="text")
     */
    private $infos;

    /**
     * @var bool
     *
     * @ORM\Column(name="active", type="boolean")
     */
    private $active = true;

    /**
     * @ORM\ManyToOne(targetEntity="OSEL\UserBundle\Entity\User", inversedBy="events")
     * @ORM\JoinColumn(nullable=true)
     */
    private $user;

    /**
     * @ORM\OneToMany(targetEntity="OSEL\EventBundle\Entity\SubEvents", mappedBy="event")
     * @ORM\JoinColumn(nullable=true)
     */
    private $subEvents;

    /**
     * @ORM\OneToMany(targetEntity="OSEL\EventBundle\Entity\SubscribeEvent", cascade={"persist"}, mappedBy="event")
     * @ORM\JoinColumn(nullable=true)
     */
    private $subscribeEvents;

    /**
     * @ORM\OneToMany(targetEntity="OSEL\EventBundle\Entity\RidingGroup", cascade={"persist"}, mappedBy="event")
     * @ORM\JoinColumn(nullable=true)
     */
    private $ridingGroups;

    /**
     * @ORM\ManyToOne(targetEntity="OSEL\EventBundle\Entity\Place", inversedBy="events")
     */
    private $place;

    /**
     * @var string
     *
     * @ORM\Column(name="imgAlt", type="string", length=255, nullable=true)
     */
    private $imgAlt;

    /**
     * @var string
     *
     * @ORM\Column(name="imgPath", type="string", length=255, nullable=true)
     */
    private $imgPath;

    private $file;



    /**
     * Constructor
     */
    public function __construct()
    {
        $this->dateAdd = new \DateTime();

        $this->subEvents = new \Doctrine\Common\Collections\ArrayCollection();
        $this->ridingGroups = new \Doctrine\Common\Collections\ArrayCollection();
        $this->subscribeEvents = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * @ORM\PreUpdate
     */
    public function updateDate()
    {
        $this->setDateUpdate(new \DateTime());
    }


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     *
     * @return Event
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set dateStart
     *
     * @param \DateTime $dateStart
     *
     * @return Event
     */
    public function setDateStart($dateStart)
    {
        $this->dateStart = $dateStart;

        return $this;
    }

    /**
     * Get dateStart
     *
     * @return \DateTime
     */
    public function getDateStart()
    {
        return $this->dateStart;
    }

    /**
     * Set dateEnd
     *
     * @param \DateTime $dateEnd
     *
     * @return Event
     */
    public function setDateEnd($dateEnd)
    {
        $this->dateEnd = $dateEnd;

        return $this;
    }

    /**
     * Get dateEnd
     *
     * @return \DateTime
     */
    public function getDateEnd()
    {
        return $this->dateEnd;
    }

    /**
     * Set dateAdd
     *
     * @param \DateTime $dateAdd
     *
     * @return Event
     */
    public function setDateAdd($dateAdd)
    {
        $this->dateAdd = $dateAdd;

        return $this;
    }

    /**
     * Get dateAdd
     *
     * @return \DateTime
     */
    public function getDateAdd()
    {
        return $this->dateAdd;
    }

    /**
     * Set dateUpdate
     *
     * @param \DateTime $dateUpdate
     *
     * @return Event
     */
    public function setDateUpdate($dateUpdate)
    {
        $this->dateUpdate = $dateUpdate;

        return $this;
    }

    /**
     * Get dateUpdate
     *
     * @return \DateTime
     */
    public function getDateUpdate()
    {
        return $this->dateUpdate;
    }

    /**
     * Set infos
     *
     * @param string $infos
     *
     * @return Event
     */
    public function setInfos($infos)
    {
        $this->infos = $infos;

        return $this;
    }

    /**
     * Get infos
     *
     * @return string
     */
    public function getInfos()
    {
        return $this->infos;
    }

    /**
     * Set user
     *
     * @param \OSEL\UserBundle\Entity\User $user
     *
     * @return Event
     */
    public function setUser(\OSEL\UserBundle\Entity\User $user = null)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user
     *
     * @return \OSEL\UserBundle\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Add subEvent
     *
     * @param \OSEL\EventBundle\Entity\SubEvents $subEvent
     *
     * @return Event
     */
    public function addSubEvent(\OSEL\EventBundle\Entity\SubEvents $subEvent)
    {
        $this->subEvents[] = $subEvent;

        return $this;
    }

    /**
     * set subEvent
     *
     *
     * @return Event
     */
    public function setSubEvents($subEvents)
    {
        $this->subEvents[] = $subEvents;

        return $this;
    }

    /**
     * Remove subEvent
     *
     * @param \OSEL\EventBundle\Entity\SubEvents $subEvent
     */
    public function removeSubEvent(\OSEL\EventBundle\Entity\SubEvents $subEvent)
    {
        $this->subEvents->removeElement($subEvent);
    }

    /**
     * Get subEvents
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSubEvents()
    {
        return $this->subEvents;
    }

    /**
     * Add ridingGroup
     *
     * @param \OSEL\EventBundle\Entity\RidingGroup $ridingGroup
     *
     * @return Event
     */
    public function addRidingGroup(\OSEL\EventBundle\Entity\RidingGroup $ridingGroup)
    {
        $this->ridingGroups[] = $ridingGroup;

        return $this;
    }

    /**
     * Remove ridingGroup
     *
     * @param \OSEL\EventBundle\Entity\RidingGroup $ridingGroup
     */
    public function removeRidingGroup(\OSEL\EventBundle\Entity\RidingGroup $ridingGroup)
    {
        $this->ridingGroups->removeElement($ridingGroup);
    }

    /**
     * Get ridingGroups
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRidingGroups()
    {
        return $this->ridingGroups;
    }

    /**
     * Add subscribeEvent
     *
     * @param \OSEL\EventBundle\Entity\SubscribeEvent $subscribeEvent
     *
     * @return Event
     */
    public function addSubscribeEvent(\OSEL\EventBundle\Entity\SubscribeEvent $subscribeEvent)
    {
        $this->subscribeEvents[] = $subscribeEvent;

        return $this;
    }

    /**
     * Remove subscribeEvent
     *
     * @param \OSEL\EventBundle\Entity\SubscribeEvent $subscribeEvent
     */
    public function removeSubscribeEvent(\OSEL\EventBundle\Entity\SubscribeEvent $subscribeEvent)
    {
        $this->subscribeEvents->removeElement($subscribeEvent);
    }

    /**
     * Get subscribeEvents
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSubscribeEvents()
    {
        return $this->subscribeEvents;
    }

    /**
     * Set place
     *
     * @param \OSEL\EventBundle\Entity\Place $place
     *
     * @return Event
     */
    public function setPlace(\OSEL\EventBundle\Entity\Place $place = null)
    {
        $this->place = $place;

        return $this;
    }

    /**
     * Get place
     *
     * @return \OSEL\EventBundle\Entity\Place
     */
    public function getPlace()
    {
        return $this->place;
    }

    /**
     * Set active
     *
     * @param boolean $active
     *
     * @return Event
     */
    public function setActive($active)
    {
        $this->active = $active;

        return $this;
    }

    /**
     * Get active
     *
     * @return boolean
     */
    public function getActive()
    {
        return $this->active;
    }

    public function getFile()
    {
        return $this->file;
    }

    public function setFile(UploadedFile $file = null)
    {
        $this->file = $file;
    }

    public function uploadImage()
    {
        if (null === $this->file) {
            return;
        }

        $name = md5(uniqid(rand(), true)) .'.'. $this->file->guessExtension();
        $this->imgAlt = $this->title;

        $this->file->move($this->getUploadRootDir(), $name);

        // On sauvegarde le nom de fichier dans notre attribut $url
        $this->imgPath = $this->getUploadDir() . $name;

    }

    public function getUploadDir()
    {
        // On retourne le chemin relatif vers l'image pour un navigateur (relatif au rÃ©pertoire /web donc)
        return 'bundles/Event/images/events/';
    }

    protected function getUploadRootDir()
    {
        // On retourne le chemin relatif vers l'image pour notre code PHP
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }
}
